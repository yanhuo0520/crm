<template>
  <div class="carAdd">
    <van-nav-bar left-text="添加今日里程照片" left-arrow fixed @click-left="leftBack" @click-right="clickRight()">
        <template #right>
            <van-icon name="coupon-o" size="24" />
        </template>
    </van-nav-bar>
      <div class="marBottom">
        <van-cell title="上班前车辆公里数照片" icon="http://sc.xfd365.com/crmImages/pic.png"></van-cell>
        <van-uploader v-model="fileListOn" :max-count="3" :after-read="afterRead1" :before-delete="beforeDelete1" />
      </div>

      <div class="marBottom">
        <van-cell title="下班后车辆公里数照片" icon="http://sc.xfd365.com/crmImages/pic.png"></van-cell>
        <van-uploader v-model="fileListOff" :max-count="3" :after-read="afterRead2" :before-delete="beforeDelete2" />
      </div>

  </div>
</template>
<script>
import Exif from "exif-js";
export default {
  name: "carAdd",
  data() {
    return {
      role: localStorage.getItem("role"), // 1为员工，2管理员
      car_id: '',
      fileListOn: [],
      picsOn: "",
      picsOnArray: [],

      fileListOff: [],
      picsOff: "",
      picsOffArray: [],

      filesObj: {
        name: "",
        type: "",
        index: ''
      },
      headerImage: "",
      picValue: "",
      upImgUrl: "",
    };
  },
  mounted() {
    window.leftBack = this.leftBack; // Android原生返回按钮执行leftBack()方法
      this.$toast.loading({
        message: '加载中...',
        forbidClick: true,
        duration: 0,
      });
    // 判断是否已经上传过
      this.$api.carSearch().then(res => {
        this.$toast.clear()
        if (res.errno === 0) {
          if(res.data.car_id){
            this.car_id = res.data.car_id
          }
          // 上班照片
          this.picsOn = res.data.pic1;
            if (this.picsOn) {
              var pics = this.picsOn;
              pics = pics.split("#");
              var r = pics.filter(function(s) {
                return s && s.trim(); // 注：IE9(不包含IE9)以下的版本没有trim()方法
              });
              this.picsOnArray = r;
              r = r.map(item => ({ url: item }));
              this.fileListOn = JSON.parse(JSON.stringify(r));
            } else {
              this.picsOn = "";
              this.picsOnArray = [];
              this.fileListOn = [];
            }

          // 下班照片
          this.picsOff = res.data.pic2;
            if (this.picsOff) {
              var pics = this.picsOff;
              pics = pics.split("#");
              var r = pics.filter(function(s) {
                return s && s.trim(); // 注：IE9(不包含IE9)以下的版本没有trim()方法
              });
              this.picsOffArray = r;
              r = r.map(item => ({ url: item }));
              this.fileListOff = JSON.parse(JSON.stringify(r));
            } else {
              this.picsOff = "";
              this.picsOffArray = [];
              this.fileListOff = [];
            }
        } else {
          // this.$toast(res.errmsg);
        }
      }).catch(err =>{
        this.$toast.clear()
      });

  },
  methods: {
    leftBack(){
      this.$router.go(-1)
    },
    clickRight(){
		if(this.role == 1){
			this.$router.push('/car')
		}else{  // 管理员2   区域管理员3
			this.$router.push('/carAdmin')
		}
    },
    // 处理图片在手机端拍照会自动旋转问题
    afterRead1(file, detail) {
      let that = this;
        that.filesObj.name = file.file.name; // 获取文件名
        that.filesObj.type = file.file.type; // 获取类型
        that.filesObj.content = file.content; 
        that.filesObj.index = detail.index
        that.fileListOn[that.filesObj.index].content = ''
        that.fileListOn[that.filesObj.index].status = 'uploading'
        that.fileListOn[that.filesObj.index].message = '上传中...'
        that.picValue = file.file; // 文件流
        that.imgPreview(this.picValue, 1);
      
    },
    // 处理图片在手机端拍照会自动旋转问题
    afterRead2(file, detail) {
      let that = this;
        that.filesObj.name = file.file.name; // 获取文件名
        that.filesObj.type = file.file.type; // 获取类型
        that.filesObj.content = file.content; 
        that.filesObj.index = detail.index
        that.fileListOff[that.filesObj.index].content = ''
        that.fileListOff[that.filesObj.index].status = 'uploading'
        that.fileListOff[that.filesObj.index].message = '上传中...'
        that.picValue = file.file; // 文件流
        that.imgPreview(this.picValue, 2);
      
    },
    // 处理图片
    imgPreview(file, num) {
      let that = this;
      let Orientation;
      //去获取拍照时的信息，解决拍出来的照片旋转问题
      Exif.getData(file, function() {
        Orientation = Exif.getTag(this, "Orientation");
      });
      // 看支持不支持FileReader
      if (!file || !window.FileReader) return;
      if (/^image/.test(file.type)) {
        let reader = new FileReader(); // 创建一个reader
        reader.readAsDataURL(file); // 将图片2将转成 base64 格式
        reader.onloadend = function() {
          // 读取成功后的回调
          // console.log(this.result)
          let result = this.result;
          let img = new Image();
          img.src = result;
          //判断图片是否大于500K,是就直接上传，反之压缩图片
          if (this.result.length <= 500 * 1024) {
            that.headerImage = this.result;
            that.postImg(num);
          } else {
            img.onload = function() {
              let data = that.compress(img, Orientation);
              that.headerImage = data;
              that.postImg(num);
            };
          }
        };
      }
    },
    // 压缩图片
    compress(img, Orientation) {
      let canvas = document.createElement("canvas");
      let ctx = canvas.getContext("2d");

      let tCanvas = document.createElement("canvas");
      let tctx = tCanvas.getContext("2d");

      let width = img.width;
      let height = img.height;
      //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      let ratio;
      if ((ratio = (width * height) / 4000000) > 1) {
        // console.log("大于400万像素");
        ratio = Math.sqrt(ratio);
        width /= ratio;
        height /= ratio;
      } else {
        ratio = 1;
      }
      canvas.width = width;
      canvas.height = height; //        铺底色
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height); //如果图片像素大于100万则使用瓦片绘制
      let count;
      if ((count = (width * height) / 1000000) > 1) {
        // console.log("超过100W像素");
        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片 //            计算每块瓦片的宽和高
        let nw = ~~(width / count);
        let nh = ~~(height / count);
        tCanvas.width = nw;
        tCanvas.height = nh;
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < count; j++) {
            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
          }
        }
      } else {
        ctx.drawImage(img, 0, 0, width, height);
      }
      //修复ios上传图片的时候 被旋转的问题
       if (Orientation != "" && Orientation != 1) {
          switch (Orientation) {
              case 6: //需要顺时针（向左）90度旋转
                  this.rotateImg(img, "left", canvas);
                  break;
               case 8: //需要逆时针（向右）90度旋转
                   this.rotateImg(img, "right", canvas);
                   break;
               case 3: //需要180度旋转
                   this.rotateImg(img, "right", canvas); //转两次
                   this.rotateImg(img, "right", canvas);
                   break;
           }
        }
            //进行最小压缩
            let ndata = canvas.toDataURL("image/jpeg", 0.1);
            tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
            return ndata;
    },
    // 旋转图片
        rotateImg(img, direction, canvas) {
            //最小与最大旋转方向，图片旋转4次后回到原方向
            const min_step = 0;
            const max_step = 3;
            if (img == null) return;
            //img的高度和宽度不能在img元素隐藏后获取，否则会出错
            let height = img.height;
            let width = img.width;
            let step = 2;
            if (step == null) {
                step = min_step;
            }
            if (direction == "right") {
                step++;
                //旋转到原位置，即超过最大值
                step > max_step && (step = min_step);
            } else {
                step--;
                step < min_step && (step = max_step);
            }
            //旋转角度以弧度值为参数
            let degree = (step * 90 * Math.PI) / 180;
            let ctx = canvas.getContext("2d");
            switch (step) {
                case 0:
                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0);
                    break;
                case 1:
                    canvas.width = height;
                    canvas.height = width;
                    ctx.rotate(degree);
                    ctx.drawImage(img, 0, -height);
                    break;
                case 2:
                    canvas.width = width;
                    canvas.height = height;
                    ctx.rotate(degree);
                    ctx.drawImage(img, -width, -height);
                    break;
                case 3:
                    canvas.width = height;
                    canvas.height = width;
                    ctx.rotate(degree);
                    ctx.drawImage(img, -width, 0);
                    break;
            }
        },
        //将base64转换为文件
        dataURLtoFile(dataurl) {
            var arr = dataurl.split(","),
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], this.filesObj.name, {
                type: this.filesObj.type
            });
        },
         //接口上传图片
        postImg(num){
          let file = this.dataURLtoFile(this.headerImage);
          let token = localStorage.getItem("token");
          var formdata = new FormData();
          formdata.append("token", token);
          formdata.append("file", file)
          const instance = this.$axios.create({
            //withCredentials:true
          });
          instance.post("http://crm.xfd365.com/user/base/uploadImg", formdata).then(res => {
            if (res.data.errno === 0) {
              this.$toast("上传成功");
              if(num == 1){
                this.fileListOn[this.filesObj.index].content = res.data.data.url
                this.fileListOn[this.filesObj.index].status = 'done'
                this.fileListOn[this.filesObj.index].message = ''
                this.picsOnArray.push(res.data.data.url);
              }else if(num == 2){
                this.fileListOff[this.filesObj.index].content = res.data.data.url
                this.fileListOff[this.filesObj.index].status = 'done'
                this.fileListOff[this.filesObj.index].message = ''
                this.picsOffArray.push(res.data.data.url);
              }
              this.savePic();
              
            } else {
              this.$toast(res.errmsg);
              if(num == 1){
              // this.fileListOn.splice(this.filesObj.index, 1);
              this.fileListOn[this.filesObj.index].status = 'failed'
              this.fileListOn[this.filesObj.index].message = '上传失败'
              }else if(num == 2){
              // this.fileListOff.splice(this.filesObj.index, 1);
              this.fileListOff[this.filesObj.index].status = 'failed'
              this.fileListOff[this.filesObj.index].message = '上传失败'                
              }
            }
          }, err=>{
            // console.log(err)
            if(num == 1){
              this.fileListOn[this.filesObj.index].status = 'failed'
              this.fileListOn[this.filesObj.index].message = '上传失败'
            }else if(num == 2){
              this.fileListOff[this.filesObj.index].status = 'failed'
              this.fileListOff[this.filesObj.index].message = '上传失败'               
            }

          });

        },
    beforeDelete1(file ,detail){
      let index = detail.index
      this.fileListOn.splice(index, 1);
      this.picsOnArray.splice(index, 1);
      this.savePic();
    },
    beforeDelete2(file ,detail){
      let index = detail.index
      this.fileListOff.splice(index, 1);
      this.picsOffArray.splice(index, 1);
      this.savePic();
    },
    savePic(){
      // 上班照片
      this.picsOn = "";
      if (this.picsOnArray != "") {
        this.picsOnArray.forEach(ele => {
          this.picsOn += ele + "#";
        });
      }
      // 下班照片
      this.picsOff = "";
      if (this.picsOffArray != "") {
        this.picsOffArray.forEach(ele => {
          this.picsOff += ele + "#";
        });
      }
      var data = {};
      data.pic1 = this.picsOn;
      data.pic2 = this.picsOff;
      data.car_id = this.car_id;
      this.$api.carSave(data).then(res => {
        if (res.errno === 0) {
          this.car_id = res.car_id // 第一次新增时要赋值
        } else {
          this.$toast(res.errmsg);
        }
      });
    },
  },
};
</script>
<style lang="less">
.carAdd {
  min-height: calc(100% - 50px);
  padding-top: 50px;
  background: #f5f5f5;
  .van-nav-bar {
    background: url(../../images/msgBg.jpg) no-repeat;
    width: 100%;
    height: 50px;
    line-height: 50px;
    background-size: 100% 50px;
    .van-nav-bar__text {
      color: #fff;
    }
    .van-icon {
      color: #fff;
    }
  }
  .marBottom{
    margin-bottom: 10px;
    background: #fff;    
  }
  .van-uploader{
    padding: 10px 15px 0 15px;
  }
  .van-uploader__preview{
    margin-right: 15px;
    margin-bottom: 15px;
  }
}
</style>