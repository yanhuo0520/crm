<template>
  <div class="neayBy">
    <div class="top" :class="{'dropdown':isDropdown1 || isDropdown2}">
      <p @click="leftBack" class="left-back">
        <img src="../../images/goback1.png" alt />
      </p>
      <van-dropdown-menu>
        <van-dropdown-item
          v-model="type"
          :options="option1"
          @open="openDropdrow1"
          @close="closeDropdrow1"
          @change="typeChange"
        />
        <van-dropdown-item
          v-model="distance"
          :options="option2"
          @open="openDropdrow2"
          @close="closeDropdrow2"
          @change="disChange"
        />
      </van-dropdown-menu>
    </div>
    <baidu-map class="map" :center="center" :zoom="zoom" @ready="handler">
      <!-- 障碍物的设置。因为要跟随滑动，以及某个点的提醒 -->
      <bm-marker :position="center" :dragging="true">
        <!-- <bm-info-window :show="true">{{maptitle}}</bm-info-window> -->
      </bm-marker>
    </baidu-map>
    <div class="addressCont">
      <img src="../../images/jiantouUp.png" v-if="!ifShow" @click="showList" alt class="topImg" />
      <img src="../../images/jiantouDown.png" v-if="ifShow" @click="hideList" alt class="topImg" />
      <div class="contTop">
        <p class="left">{{locationdata.address}}</p>
        <p class="right" @click="mapSearch">切换位置</p>
      </div>
      <div class="contCont" v-if="ifShow" @scroll="scrollItem">
        <div v-if="lists.length > 0">
          <div class="contLi" v-for="(item, index) in lists" :key="index">
            <div class="leftImg">{{item.firstName}}</div>
            <div class="left">
              <p v-if="item.serverName">{{item.serverName}}</p>
              <p class="desc" :class="{'ifStationName': !item.serverName}">{{item.customerName}} | {{item.phones}}</p>
            </div>
            <div class="right">
              <a :href="'tel:' + item.phones">
                <img src="../../images/tel.png" alt />
              </a>
            </div>
          </div>
          <p class="loadOver" v-if="page == totalPage">已加载完毕</p>
        </div>
        <div v-else class="zanwu">
          暂无内容
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import BaiduMap from "vue-baidu-map/components/map/Map.vue";
export default {
  name: "nearBy",
  data() {
    return {
      center: { lng: 113.39852, lat: 34.91405 }, // 地图初始化的位置
      zoom: 14, // 地图内的大小
      maptitle: "", // 这个是选择某个点的提醒以及搜索附近的东西的依据
      locationdata: {
        address: "",
        lng: "",
        lat: ""
      },
      locationIf: true,
      geolocation: "",
      biaoji: false,
      userName: "",

      type: 2,
      option1: [
        { text: "全部", value: 2 }, // 0查询建行客户，1查询新增客户， 2查询全部客户
        { text: "我负责的客户", value: 0 },
        { text: "新添加的客户", value: 1 }
      ],
      distance: "1",
      option2: [
        { text: "附近1km", value: "1" },
        { text: "附近3km", value: "3" },
        { text: "附近5km", value: "5" }
      ],
      isDropdown1: false,
      isDropdown2: false,
      ifShow: false,

      page: 1,
      pageSize: 10,
      totalPage: 1,
      lists: []
    };
  },
  mounted() {
    window.leftBack = this.leftBack // Android原生返回按钮执行leftBack()方法
    this.userName = localStorage.getItem("userName");
    window.onAndroid = this.onAndroid;
    window.onGetLocation = this.onGetLocation;
    window.geoc = null;
    window.convertor = null;
    window.vue = this;

    window.addEventListener("scroll", this.scrollBottom);

    var lng = this.$route.query.lng;
    let that = this
    if(this.$route.query.lng){
      that.locationIf = false
      that.locationdata.lng = lng
      that.locationdata.lat = this.$route.query.lat
      that.locationdata.address = this.$route.query.addressSel
    }
  },
  methods: {
    leftBack(){
      this.$router.push({
        path: '/'
      })
    },
    closeDropdrow1() {
      this.isDropdown1 = false;
    },
    closeDropdrow2() {
      this.isDropdown2 = false;
    },
    openDropdrow1() {
      this.isDropdown1 = true;
    },
    openDropdrow2() {
      this.isDropdown2 = true;
    },
    showList() {
      this.getList();
      this.ifShow = true;
    },
    hideList() {
      this.ifShow = false;
    },
    typeChange() {
      let that = this;
      that.type = this.type;
      if(that.ifShow){
        that.page = 1;
        that.getList();
      }
    },
    disChange() {
      let that = this;
      that.distance = this.distance;
      if(that.ifShow){
        that.page = 1;
        that.getList();
      }
    },
    mapSearch() {
      this.$router.push({
        path: "/mapSearch",
        query: {
          from: "nearBy"
        }
      });
    },
    scrollItem(e) {
      let that = this;
      var scrollTop = e.target.scrollTop;
      let clientHeight = e.target.clientHeight; /*当前可视高度*/
      let scrollHeight = e.target.scrollHeight; /*文档完整的高度*/
      if (scrollHeight - clientHeight - scrollTop <= 0 && that.page < that.totalPage) {

        that.page += 1;
        that.loading = 1;
        that.getList();
      }
    },
    getList() {
      var that = this;
      let data = {};
      data.page = that.page;
      data.size = that.pageSize;
      data.lng = that.locationdata.lng;
      data.lat = that.locationdata.lat;
      data.type = that.type;
      data.distance = that.distance;  
      // data.lng = "113.649644";
      // data.lat = "34.75661";
      // data.type = '';
      // data.distance = '5';
      // console.log(data);
      this.$api.nearbyList(data).then(res => {
        that.totalPage = res.total_page;
        if (res.errno === 0) {
          if (that.page == 1) {
            that.loading = 0;
            that.lists = res.data;
          } else if (res.data.length > 0) {
            that.lists.push(...res.data);
            if (res.data.length < that.pageSize || (res.data.length == that.pageSize && that.page == that.totalPage)) {
              that.loading = 0;
            }
          } else if (that.page == that.totalPage) {
            that.loading = 0;
          }

          if(that.lists){
            that.lists.forEach(ele => {
              ele.firstName = ele.customerName.substr(0, 1)
            });
          }
        } else {
          that.loading = 0;
          that.lists = [];
          this.$toast(res.errmsg);
        }
      });
    },

    // 由于百度地图 JS API 只有 JSONP 一种加载方式，因此 BaiduMap 组件及其所有子组件的渲染只能是异步的。因此，请使用在组件的 ready 事件来执行地图 API 加载完毕后才能执行的代码，不要试图在 vue 自身的生命周期中调用 BMap 类，更不要在这些时机修改 model 层。
    handler({ BMap, map }) {
      window.map = map; //注册为全局
      var that = this; // map方法中的this指向不对。所有申明一个。。小细节的东西
      // 刚进入页面中的定位，需要向用户授权
      var point = new BMap.Point(113.39852, 34.897445);

      var geolocation = new BMap.Geolocation();
      var geoc = new BMap.Geocoder();
      window.geoc = geoc;

      var convertor = new BMap.Convertor();
      window.convertor = convertor;

      var isAndroid = localStorage.getItem("isAndroid");
      if (isAndroid == "123") {
        if(!that.locationIf){
          that.center.lng = that.locationdata.lng
          that.center.lat = that.locationdata.lat
          var pointSel = new BMap.Point(that.locationdata.lng, that.locationdata.lat);
          var markerSel = new BMap.Marker(pointSel);
          map.addOverlay(markerSel);
          map.panTo(pointSel);
        }else{
          android.requestLocation();
        }
      } else {
        if(!that.locationIf){
          that.center.lng = that.locationdata.lng
          that.center.lat = that.locationdata.lat
          var pointSel = new BMap.Point(that.locationdata.lng, that.locationdata.lat);
          var markerSel = new BMap.Marker(pointSel);
          map.addOverlay(markerSel);
          map.panTo(pointSel);
        }else{
          geolocation.getCurrentPosition(function(r) {
            if (this.getStatus() == BMAP_STATUS_SUCCESS) {
              that.center.lng = r.point.lng;
              that.center.lat = r.point.lat;
              var marker = new BMap.Marker(r.point);
              map.addOverlay(marker);
              // map.panTo(r.point);
              var pt = r.point;
              geoc.getLocation(pt, function(rs) {
                var addComp = rs.addressComponents;
                that.locationdata.address =
                  addComp.province +
                  addComp.city +
                  addComp.district +
                  addComp.street +
                  addComp.streetNumber;
                that.locationdata.lng = rs.point.lng;
                that.locationdata.lat = rs.point.lat;
              });
            } else {
              alert("failed" + this.getStatus());
            }
          },{ enableHighAccuracy: true }
        );
        }
        
      }
    },
    // 移动开始
    movemapstart() {
      this.biaoji = false;
    },
    onAndroid() {
      // this.$isAndroid = true
      localStorage.setItem("isAndroid", "123");
    },
    onGetLocation(lat, lon) {
      var that = this;
      var centerGet = new BMap.Point(lon, lat);
      var convertor = window.convertor;
      var pointArr = [];
      pointArr.push(centerGet);
      convertor.translate(pointArr, 1, 5, function(data) {
        if (data.status === 0) {
          that.center.lng = data.points[0].lng;
          that.center.lat = data.points[0].lat;
          var geoc = window.geoc;
          var center = Object.assign({}, that.center);
          center = new BMap.Point(center.lng, center.lat);
          geoc.getLocation(center, function(rs) {
            var addComp = rs.addressComponents;
            if (addComp.province) {
              that.locationdata.address =
                addComp.province +
                addComp.city +
                addComp.district +
                addComp.street +
                addComp.streetNumber;
              that.locationdata.lng = rs.point.lng;
              that.locationdata.lat = rs.point.lat;
            }
          });
        }
      });
    }
  }
};
</script>
<style lang="less">
.neayBy {
  min-height: 100%;
  background: #f5f5f5;
  .dropdown {
    background: #ffffff;
  }
  .top {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    z-index: 1;
    .left-back {
      position: absolute;
      left: 10px;
      top: 10px;
      width: 40px;
      height: 40px;
      background: #ffffff;
      border-radius: 50%;
      z-index: 1;
      text-align: center;
      img {
        height: 20px;
        margin-top: 10px;
      }
    }
    .van-dropdown-menu {
      margin: 10px 20% 0 20%;
      height: 40px;
      border-radius: 40px;
      box-shadow: -5px 0px 16px 0px rgba(238, 238, 238, 1);
      .van-dropdown-menu__item:first-child {
        position: relative;
        &::after {
          position: absolute;
          content: " ";
          right: -15px;
          top: 10px;
          bottom: 10px;
          width: 1px;
          background: #eeeeee;
        }
      }
      .van-dropdown-menu__title {
        font-size: 14px;
        &::after {
          opacity: 0.35;
        }
      }
    }
  }
  .map {
    height: calc(100vh - 50px);
    background: #eeeeee;
  }
  .addressCont {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    padding-top: 20px;
    background: #ffffff;
    .topImg {
      position: absolute;
      left: calc(50% - 45px);
      top: -40px;
      width: 90px;
    }
    .contTop {
      padding: 15px;
      display: flex;
      font-size: 14px;
      border-bottom: 1px solid #eeeeee;
      .left {
        background: url(../../images/dingwei1.png) no-repeat left center;
        background-size: auto 16px;
        padding-left: 20px;
        justify-content: left;
        width: calc(100% - 80px);
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
      }
      .right {
        width: 80px;
        justify-content: right;
        text-align: right;
        color: #1c92ff;
      }
    }
    .contCont {
      max-height: 284px;
      overflow-y: scroll;
    }
    .contLi {
      display: flex;
      font-size: 14px;
      padding: 10px 15px;
      border-bottom: 1px solid #eeeeee;
      .leftImg {
        background: #1c92ff;
        color: #ffffff;
        font-size: 15px;
        width: 40px;
        height: 40px;
        border-radius: 30px;
        line-height: 40px;
        text-align: center;
      }
      .left {
        padding: 0 10px;
        width: calc(100% - 90px);
        .desc {
          color: #999999;
          &.ifStationName{
            margin-top: 12px;
          }
        }
      }
      .right {
        img {
          width: 40px;
        }
      }
    }
    .loadOver {
      text-align: center;
      color: #cccccc;
      padding: 6px 0;
    }
    .zanwu{
      display: flex;
      justify-content: center;
      padding: 5% 0;
    }
  }
}
</style>