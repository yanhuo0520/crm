<template>
  <div class="addCustomer">
    <van-nav-bar :left-text="leftText" fixed left-arrow @click-left="leftBack" />
    <div class="marBottom">
      <van-cell
        title="客户标签类型"
        @click="tagList"
        is-link
        :value="typeName"
        icon="http://sc.xfd365.com/crmImages/tag.png"
      />
      <!-- <van-cell
        title="客户标签类型"
        @click="isType=true"
        is-link
        :value="typeName"
        icon="http://sc.xfd365.com/crmImages/tag.png"
      /> -->
    </div>

    <div class="marBottom">
      <van-field
        placeholder="请输入客户姓名"
        label="客户名称"
        left-icon="http://sc.xfd365.com/crmImages/name.png"
        input-align="right"
        v-model="name"
      />
      <van-field
        placeholder="请输入手机号码"
        type="tel"
        label="联系电话"
        left-icon="http://sc.xfd365.com/crmImages/phone.png"
        input-align="right"
        v-model="mobile"
        maxlength="11"
      />
      <!-- <van-field
                placeholder="请选择客户地址"
                label="客户地址"
                left-icon="http://sc.xfd365.com/crmImages/address.png"
                input-align="right"
                v-model="address"
                @click="prov = true"
      />-->
      <van-field
        placeholder="请输入服务站点名称"
        label="服务站点名称"
        left-icon="http://sc.xfd365.com/crmImages/customerName.png"
        input-align="right"
        v-model="station_name"
      />
      <van-cell class="getAddress" title="服务点地址" :value="address ? address : '未知地址(点击手动输入或地图搜索)'" icon="http://sc.xfd365.com/crmImages/dingwei.png" is-link @click="mapSearch" />
      <baidu-map @ready="handler"></baidu-map>

    </div>

    <div class="provin" v-show="prov">
      <van-area :area-list="areaList" @cancel="hideProv" @confirm="confirmProv" />
      <van-overlay :show="prov" @click="prov = false" />
    </div>

    <div class="marBottom">
      <van-field
        :value="userName"
        label="归属人员"
        left-icon="http://sc.xfd365.com/crmImages/guishu.png"
        input-align="right"
        readonly
      />
    </div>

    <div class="marBottom">
      <van-cell
        title="新增关联客户"
        @click="addGlCustomer"
        is-link
        :value="linker_name"
        icon="http://sc.xfd365.com/crmImages/guanlian.png"
      />
    </div>
    <div class="marBottom">
      <van-cell title="上传客户相关图片" icon="http://sc.xfd365.com/crmImages/pic.png" is-link></van-cell>
      <van-uploader v-model="fileList1" :after-read="afterRead1" :before-delete="beforeDelete1" />

    </div>
    <div class="marBottom">
      <van-cell title="备注信息" icon="http://sc.xfd365.com/crmImages/beizhu.png"></van-cell>
      <van-field v-model="message" rows="2" autosize type="textarea" placeholder="请输入备注内容" />
    </div>

    <van-popup v-model="isType">
      <div class="content">
        <div class="imgDiv">
          <img src="http://sc.xfd365.com/crmImages/tags.png" alt />
        </div>
        <p>*可以选择多种标签</p>
        <ul>
          <li
            v-for="(item,index) in type"
            :key="index"
            :class="item.ischecked?'active':''"
            @click="item.ischecked = !item.ischecked"
          >{{item.tag_name}}</li>
        </ul>
        <button @click="closeType">确定</button>
      </div>
    </van-popup>
    <!-- <img src="http://sc.xfd365.com/crmImages/tags.png" alt v-show="isType" /> -->

    <button class="save" v-if="hidshowFooter" @click="save">保存</button>

    <van-dialog v-model="showAddrDialog" title="提示" show-cancel-button cancelButtonText="地图搜索"  confirmButtonText="输入确认" confirmButtonColor = "#ee0a24" @cancel="toSearchAddr" @confirm="changeAddrConfirm">
      <div class="addr-dialog-desc">当前定位未获取到详细地址</div> 
      <div class="addr-dialog-desc">注意:手动输入仅仅限于您在当前服务点附近</div>
      <van-field class="addr-dialog-input" v-model="dialogAddr" label-width="40px" label="地址" placeholder="请输入地址(若选择地图搜索可不填)" />
    </van-dialog>
  </div>
</template>
<script>
import AreaList from "../../styles/area";
import BaiduMap from "vue-baidu-map/components/map/Map.vue";
import Exif from "exif-js";
export default {
  name: "addCustomer",
  data() {
    return {
      leftText: "新增客户",
      type: [
        // {
        //   title: "益农社站长",
        //   ischecked: false
        // }
      ],
      isType: false,
      station_id: "", // 编辑客户ID
      typeName: "请选择客户标签类型",
      label: "",
      typeNameArray: [],
      customer_tag_id: "",
      name: "",
      mobile: "",
      station_name: "",
      address: '',
      lnglat: '',
      location: '',
      locationlnglat: '',
      userName: "",
      linker_id: "",
      linker_name: "",
      fileList1: [],
      pics: "",
      picsArray: [],
      message: "",
      from: '',

      station_address: "",
      areaList: AreaList,
      prov: false,

      docmHeight: document.documentElement.clientHeight,  //默认屏幕高度       
      showHeight:  '0',   //实时屏幕高度        
      hidshowFooter:true,  //显示或者隐藏footer, 

      filesObj: {
        name: "",
        type: "",
        index: ''
      },
      headerImage: "",
      picValue: "",
      upImgUrl: "",

      showAddrDialog: false,
      dialogAddr: ''
    };
  },
  mounted() {
    localStorage.removeItem('initAddrToMap')
    window.leftBack = this.leftBack // Android原生返回按钮执行leftBack()方法

    window.locationGDAll = this.locationGDAll
    window.geoc = null;
    window.convertor = null
    window.vue = this;

    window.onresize = ()=>{   // 实时屏幕高度
		  this.showHeight = document.body.clientHeight     
	  }

    document.documentElement.scrollTop = 0;
    this.userName = localStorage.getItem("userName");
    var id = this.$route.query.id;
    if (this.$route.query.id) {
      // 编辑
      this.leftText = "编辑客户";
      this.$toast.loading({
          message: '加载中...',
          forbidClick: true,
          duration: 0,
        });
      this.$api.stationDetail({ station_id: id }).then(res => {
        this.$toast.clear()
        //   console.log(res)
        if (res.errno === 0) {
          if (res.data) {
            this.station_id = res.data.station_id;
            this.label = res.data.label;
            this.customer_tag_id = res.data.customer_tag_id;
            if (this.label) {
              // let typeNameArray = this.label.substr(0, this.label.length - 1).split("#"); // 最后一位有#
              let typeNameArray = this.label.substr(0, this.label.length).split("#");
              this.typeNameArray = typeNameArray
              var typeName = "";
              typeNameArray.forEach(ele => {
                typeName += ele + "、";
              });
            }
            this.typeName = typeName;
            this.name = res.data.name;
            this.mobile = res.data.mobile;
            this.station_name = res.data.station_name;
            if (res.data.station_address) {
              this.station_address = res.data.station_address;
            }
            this.addressDetail = res.data.address;
            this.message = res.data.note;
            this.pics = res.data.thumb;
            if (this.pics) {
              var pics = this.pics;
              pics = pics.split("#");
              var r = pics.filter(function(s) {
                return s && s.trim(); // 注：IE9(不包含IE9)以下的版本没有trim()方法
              });
              r = r.map(item => ({ url: item }));
              this.fileList1 = JSON.parse(JSON.stringify(r));
            } else {
              this.pics = "";
              this.fileList1 = [];
            }
          }
        }
      }).catch(err =>{
        this.$toast.clear()
      });
    } else {
      this.leftText = "新增客户";
      // 新增
      this.linker_id = this.$route.query.linker_id;
      this.linker_name = this.$route.query.linker_name;

    }
  },
  methods: {
    leftBack() {
      // this.$router.go(-1);
      this.$router.push({
        path: "/kehu"
      });
    },
    tagList(){ // 获取标签列表
      let that = this;
      that.isType = true
      this.$api.tagList({type: 2}).then(res=>{
        if(res.errno === 0){
          if(res.data){
            that.type = []
            res.data.forEach(ele => {
              let tag_name = ele.tag_name
              if(that.typeNameArray.indexOf(tag_name) > -1){
                ele.ischecked = true
              }else{
                ele.ischecked = false
              }
              that.type.push(ele)
            });
          }
        }else{
          this.$toast(res.errmsg)
        }
      })
    },
    mapSearch(){
      if (this.address) { // 如果正常获取定位地址 可直接跳转搜索地址
        localStorage.setItem('initAddrToMap', this.address) // 仅仅为了跳转地图搜索页面 未获取地址详情时回显
        this.$router.push({
          path: "/mapSearch",
          query: {
            from: 'addCustomer'
          }
        });
      } else { // 不可正常获取 让用户选择 手动输入名称或者 跳转搜索地址
        this.showAddrDialog =  true
      }
    },
    // 手动输入服务点地址确认
    changeAddrConfirm () {
      this.address = this.dialogAddr
      this.showAddrDialog = false
    },
    // 跳转地图搜索
    toSearchAddr () {
      this.$router.push({
        path: "/mapSearch",
        query: {
          from: 'addCustomer'
        }
      });
    },
    handler({ BMap, map }) {
      window.map = map; //注册为全局
      var that = this; // map方法中的this指向不对。所有申明一个。。小细节的东西
      // 刚进入页面中的定位，需要向用户授权
      var point = new BMap.Point(113.39852, 34.897445);

      var geolocation = new BMap.Geolocation();
      var geoc = new BMap.Geocoder();
      window.geoc = geoc;

      var convertor = new BMap.Convertor();
      window.convertor = convertor

      if (typeof android != 'undefined') {
        android.requestLocation();
      } else {
        geolocation.getCurrentPosition(
          function(r) {
            if (this.getStatus() == BMAP_STATUS_SUCCESS) {
              var pt = r.point;
              geoc.getLocation(pt, function(rs) {
                console.log(rs)
                if(rs.surroundingPois.length > 0){ // 附近的POI点，默认取第一个值
                  that.lnglat = rs.surroundingPois[0].point.lng + ',' + rs.surroundingPois[0].point.lat
                  that.locationlnglat = rs.surroundingPois[0].point.lng + ',' + rs.surroundingPois[0].point.lat
                  if(rs.surroundingPois[0].address.length > 1){ // eg:地铁站address为' '
                    that.address = rs.surroundingPois[0].address + '(' + rs.surroundingPois[0].title + ')';
                    that.location = rs.surroundingPois[0].address + '(' + rs.surroundingPois[0].title + ')';
                  }else{
                    that.address = rs.surroundingPois[0].title;
                    that.location = rs.surroundingPois[0].title;
                  }
                }else{
                  that.lnglat = rs.point.lng + ',' + rs.point.lat
                  that.locationlnglat = rs.point.lng + ',' + rs.point.lat
                  that.address = rs.address
                  that.location =  rs.address
                }
              });
            } else {
              alert("failed" + this.getStatus());
            }
          },
          { enableHighAccuracy: true }
        );
      }
    },
    onAndroid() {
      localStorage.setItem("isAndroid", "123");
    },
    // 执行Android方法获取位置信息----（高德坐标转换成百度坐标）
        locationGDAll(location){
          let that = this
          let X_PI = Math.PI * 3000.0 / 180.0;
          let x = location.longitude, y = location.latitude;
          let z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * X_PI);
          let theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * X_PI);

          that.lnglat = (z * Math.cos(theta) + 0.0065) + ',' + (z * Math.sin(theta) + 0.006);
          that.locationlnglat = (z * Math.cos(theta) + 0.0065) + ',' + (z * Math.sin(theta) + 0.006);
          that.address = location.address
          that.location = location.address
        },

    addGlCustomer() {
      this.$router.push({
        path: "/addGlCustomer"
      });
    },
    save() {
      // console.log(this.linker_id + "---22222222222222")
      if (this.name.trim().length == 0) {
        this.$toast("请填写客户名称！");
        return;
      }
      let reg = /^1[0-9]{10}$/;
      if (this.mobile.trim().length == 0) {
        this.$toast("请输入联系方式！");
        return;
      } else if (this.mobile.length <= 10 || !reg.test(this.mobile)) {
        this.$toast("请输入正确的联系方式！");
        return;
      }
      if (!this.address) {
        this.showAddrDialog = true
        return
      }
      this.pics = "";
      if (this.picsArray != "") {
        this.picsArray.forEach(ele => {
          this.pics += ele + "#";
        });
      }

      var data = {}
      data.station_id = this.station_id
      data.name = this.name
      data.mobile = this.mobile
      data.station_name = this.station_name
      data.station_address = this.address //  data.address = this.addressDetail
      data.lnglat = this.lnglat
      data.note = this.message
      data.thumb = this.pics
      data.label = this.label
      data.customer_tag_id = this.customer_tag_id
      data.linker_id = this.linker_id
      data.stype = 0

      // console.log(data)
      // return;

      this.$api.stationSave(data).then(res => {
          this.$toast(res.errmsg);
          if (res.errno === 0) {
            // this.$router.go(-1)
            this.leftBack();
          }
        });
    },

    hideProv: function() {
      this.prov = false;
    },
    confirmProv: function(val) {
      this.prov = false;
      this.addressDetail = "";
      let value = JSON.stringify(val);
      value = JSON.parse(value);
      this.station_address = "";
      value.forEach(element => {
        if (element.name == null) {
          return;
        } else {
          this.station_address += element.name + "/";
        }
      });
      this.station_address = this.station_address.substring(
        0,
        this.station_address.lastIndexOf("/")
      );
    },
  
    afterRead1(file, detail) {
      let that = this;
      that.filesObj.name = file.file.name; // 获取文件名
      that.filesObj.type = file.file.type; // 获取类型
      that.filesObj.index = detail.index
      that.fileList1[that.filesObj.index].content = ''
      that.fileList1[that.filesObj.index].status = 'uploading'
      that.fileList1[that.filesObj.index].message = '上传中...'
      that.picValue = file.file; // 文件流
      that.imgPreview(this.picValue);
    },
    // 处理图片
    imgPreview(file) {
      let that = this;
      let Orientation;
      //去获取拍照时的信息，解决拍出来的照片旋转问题
      Exif.getData(file, function() {
        Orientation = Exif.getTag(this, "Orientation");
      });
      // 看支持不支持FileReader
      if (!file || !window.FileReader) return;
      if (/^image/.test(file.type)) {
        let reader = new FileReader(); // 创建一个reader
        reader.readAsDataURL(file); // 将图片2将转成 base64 格式
        reader.onloadend = function() {
          // 读取成功后的回调
          // console.log(this.result)
          let result = this.result;
          let img = new Image();
          img.src = result;
          //判断图片是否大于500K,是就直接上传，反之压缩图片
          if (this.result.length <= 500 * 1024) {
            that.headerImage = this.result;
            that.postImg();
          } else {
            img.onload = function() {
              let data = that.compress(img, Orientation);
              that.headerImage = data;
              that.postImg();
            };
          }
        };
      }
    },
    // 压缩图片
    compress(img, Orientation) {
      let canvas = document.createElement("canvas");
      let ctx = canvas.getContext("2d");

      let tCanvas = document.createElement("canvas");
      let tctx = tCanvas.getContext("2d");

      let width = img.width;
      let height = img.height;
      //如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      let ratio;
      if ((ratio = (width * height) / 4000000) > 1) {
        // console.log("大于400万像素");
        ratio = Math.sqrt(ratio);
        width /= ratio;
        height /= ratio;
      } else {
        ratio = 1;
      }
      canvas.width = width;
      canvas.height = height; //        铺底色
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height); //如果图片像素大于100万则使用瓦片绘制
      let count;
      if ((count = (width * height) / 1000000) > 1) {
        // console.log("超过100W像素");
        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片 //            计算每块瓦片的宽和高
        let nw = ~~(width / count);
        let nh = ~~(height / count);
        tCanvas.width = nw;
        tCanvas.height = nh;
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < count; j++) {
            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
          }
        }
      } else {
        ctx.drawImage(img, 0, 0, width, height);
      }
      //修复ios上传图片的时候 被旋转的问题
       if (Orientation != "" && Orientation != 1) {
          switch (Orientation) {
              case 6: //需要顺时针（向左）90度旋转
                  this.rotateImg(img, "left", canvas);
                  break;
               case 8: //需要逆时针（向右）90度旋转
                   this.rotateImg(img, "right", canvas);
                   break;
               case 3: //需要180度旋转
                   this.rotateImg(img, "right", canvas); //转两次
                   this.rotateImg(img, "right", canvas);
                   break;
           }
        }
            //进行最小压缩
            let ndata = canvas.toDataURL("image/jpeg", 0.1);
            tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
            return ndata;
    },
    // 旋转图片
        rotateImg(img, direction, canvas) {
            //最小与最大旋转方向，图片旋转4次后回到原方向
            const min_step = 0;
            const max_step = 3;
            if (img == null) return;
            //img的高度和宽度不能在img元素隐藏后获取，否则会出错
            let height = img.height;
            let width = img.width;
            let step = 2;
            if (step == null) {
                step = min_step;
            }
            if (direction == "right") {
                step++;
                //旋转到原位置，即超过最大值
                step > max_step && (step = min_step);
            } else {
                step--;
                step < min_step && (step = max_step);
            }
            //旋转角度以弧度值为参数
            let degree = (step * 90 * Math.PI) / 180;
            let ctx = canvas.getContext("2d");
            switch (step) {
                case 0:
                    canvas.width = width;
                    canvas.height = height;
                    ctx.drawImage(img, 0, 0);
                    break;
                case 1:
                    canvas.width = height;
                    canvas.height = width;
                    ctx.rotate(degree);
                    ctx.drawImage(img, 0, -height);
                    break;
                case 2:
                    canvas.width = width;
                    canvas.height = height;
                    ctx.rotate(degree);
                    ctx.drawImage(img, -width, -height);
                    break;
                case 3:
                    canvas.width = height;
                    canvas.height = width;
                    ctx.rotate(degree);
                    ctx.drawImage(img, -width, 0);
                    break;
            }
        },
        //将base64转换为文件
        dataURLtoFile(dataurl) {
            var arr = dataurl.split(","),
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], this.filesObj.name, {
                type: this.filesObj.type
            });
        },
         //接口上传图片
        postImg(){
          let file = this.dataURLtoFile(this.headerImage);
          let token = localStorage.getItem("token");
          var formdata = new FormData();
          formdata.append("token", token);
          formdata.append("file", file)
          const instance = this.$axios.create({
            //withCredentials:true
          });
          instance.post("http://crm.xfd365.com/user/base/uploadImg", formdata).then(res => {
            if (res.data.errno === 0) {
              this.$toast("上传成功");
              this.fileList1[this.filesObj.index].content = res.data.data.url
              this.fileList1[this.filesObj.index].status = 'done'
              this.fileList1[this.filesObj.index].message = ''
              this.picsArray.push(res.data.data.url);
            } else {
              this.$toast(res.errmsg);
              this.fileList1[this.filesObj.index].status = 'failed'
              this.fileList1[this.filesObj.index].message = '上传失败'
            }
          }, err=>{
            // console.log(err)
            this.fileList1[this.filesObj.index].status = 'failed'
            this.fileList1[this.filesObj.index].message = '上传失败'
          });

        },
    beforeDelete1(file ,detail){
      let index = detail.index
      this.fileList1.splice(index, 1);
      this.picsArray.splice(index, 1);
    },
    closeType() {
      var type = this.type;
      var arr = type.filter(ele => {
        return ele.ischecked;
      });
      arr = JSON.parse(JSON.stringify(arr));
      var typeNameArray = []
      var typeName = "";
      var label = "";
      var customer_tag_id = "";
      arr.forEach(ele => {
        typeNameArray.push(ele.tag_name)
        typeName += ele.tag_name + "、";
        label += ele.tag_name + "#";
        customer_tag_id += ele.customer_tag_id + ","
      });
      this.typeNameArray = typeNameArray
      this.typeName = typeName;
      this.label = label;
      this.customer_tag_id = customer_tag_id;
      this.isType = false;
    }
  },
  beforeRouteEnter(to, from, next) {
    if(from.path == "/"){
      to.meta.from = "index"
    }else if(from.path == "/customer"){
        to.meta.from = "customer"
    }  
    let linker_id = to.query.linker_id;
    let linker_name = to.query.linker_name;
    to.meta.linker_id = linker_id;
    to.meta.linker_name = linker_name;

    let addressSel = to.query.addressSel
    to.meta.addressSel = addressSel
    let lnglatSel = to.query.lnglatSel
    to.meta.lnglatSel = lnglatSel

    if (from.path == "/addGlCustomer" || from.path == "/mapSearch") {
      to.meta.isBack = true;
    } else {
      to.meta.isBack = false;
    }

    next();
  },
  activated() {
    // console.log("activated");
    window.leftBack = this.leftBack // Android原生返回按钮执行leftBack()方法
    
    window.locationGDAll = this.locationGDAll
    window.geoc = null;
    window.vue = this;

    window.onresize = ()=>{   // 实时屏幕高度
		  this.showHeight = document.body.clientHeight     
    }
    
    this.from = this.$route.meta.from

    if(this.$route.meta.linker_id){
      // 只能添加一个关联客户，后添加会覆盖之前的
      // this.linker_id = this.$route.meta.linker_id;
      // this.linker_name = this.$route.meta.linker_name;
      
      // 同时添加多个关联客户
      if(this.linker_id){
        this.linker_id = this.linker_id + ',' + this.$route.meta.linker_id;
        this.linker_name = this.linker_name + '、' + this.$route.meta.linker_name;
      }else{
        this.linker_id = this.$route.meta.linker_id;
        this.linker_name = this.$route.meta.linker_name;
      }
    }
   
    if(this.$route.meta.addressSel){
      this.address = this.$route.meta.addressSel
      this.lnglat = this.$route.meta.lnglatSel
    }
    if (!this.$route.meta.isBack) { // 不缓存
      document.documentElement.scrollTop = 0;
      this.station_id = "";
      this.typeName = "请选择客户标签类型";
      this.type = [],
      this.label = "";
      this.typeNameArray = []
      this.customer_tag_id = "",
      this.name = "";
      this.mobile = "";
      this.station_name = "";
      this.address = this.location
      this.lnglat = this.locationlnglat
      this.userName = localStorage.getItem("userName");
      this.linker_id = "";
      this.linker_name = "";
      this.fileList1 = [];
      this.pics = "";
      this.picsArray = [];
      this.message = "";

      this.station_address = "";
      this.addressDetail = "";
      var id = this.$route.query.id;
      if (this.$route.query.id) {
        // 编辑
        this.leftText = "编辑客户";
        this.$api.stationDetail({ station_id: id }).then(res => {
          //   console.log(res)
          if (res.errno === 0) {
            if (res.data) {
              this.station_id = res.data.station_id;
              this.label = res.data.label;
              this.customer_tag_id = res.data.customer_tag_id;
              if (this.label.length > 0) {
                // let typeNameArray = this.label.substr(0, this.label.length - 1).split("#"); // 最后一位有#
                let typeNameArray = this.label.substr(0, this.label.length).split("#");
                this.typeNameArray = typeNameArray
                var typeName = "";
                typeNameArray.forEach(ele => {
                  typeName += ele + "、";
                });
                this.typeName = typeName;
              }else{
                this.typeName = "请选择客户标签类型";
              }
              this.name = res.data.name;
              this.mobile = res.data.mobile;
              this.station_name = res.data.station_name;
              this.address = res.data.station_address
              this.lnglat = res.data.lnglat
              this.pics = res.data.thumb;
              if (this.pics) {
                var pics = this.pics;
                pics = pics.split("#");
                var r = pics.filter(function(s) {
                  return s && s.trim(); // 注：IE9(不包含IE9)以下的版本没有trim()方法
                });
                this.picsArray = r;
                r = r.map(item => ({ url: item }));
                this.fileList1 = JSON.parse(JSON.stringify(r));
              } else {
                this.pics = [];
                this.fileList = [];
              }
              this.message = res.data.note;

              if (res.data.station_address) {
                this.station_address = res.data.station_address;
              }
              this.addressDetail = res.data.address;
              
            }
          }
        });
      } else {
        this.leftText = "新增客户";
      }
    }
    this.$route.meta.isBack = false;
  },
  watch:{
    showHeight: function(){
      if(this.docmHeight > this.showHeight){
        this.hidshowFooter = false
      }else{
        this.hidshowFooter = true
      }
    }
  },
};
</script>
<style lang="less">
.addCustomer {
  min-height: calc(100% - 100px);
  padding-top: 50px;
  padding-bottom: 50px;
  overflow-y: scroll;
  background: #f5f5f5;
  .van-nav-bar {
    background: url(../../images/msgBg.jpg) no-repeat;
    width: 100%;
    height: 50px;
    line-height: 50px;
    background-size: 100% 50px;
    .van-nav-bar__text {
      color: #fff;
    }
    .van-icon {
      color: #fff;
    }
  }
.getAddress .van-cell__title{
    flex: 0.4;
  }
  .van-field__control {
    text-overflow: ellipsis;
  }
  .addressCont {
    position: relative;
    .van-field__label {
      width: 72px;
    }
    .addressIn {
      padding-right: 100px;
    }
    .getLocat {
      position: absolute;
      right: 0;
      top: 0;
      bottom: 0;
      span {
        padding: 6px 5px;
        border-radius: 5px;
        background: #1c92ff;
        color: #ffffff;
        display: flex;
        margin: 8px 10px;
      }
    }
  }

  .van-picker {
    width: 100%;
    position: fixed;
    bottom: 0;
    left: 0;
    z-index: 999;
  }

  .marBottom {
    margin-bottom: 10px;
    background: #fff;
  }

  .van-uploader{
    padding: 10px 15px 0 15px;
  }
  .van-uploader__preview{
    margin-right: 15px;
    margin-bottom: 15px;
  }
 

  .van-popup {
    width: 90%;
    border-radius: 10px;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    .content {
      .imgDiv{
        height: 36px;
        background: rgba(0, 0, 0, 0.7);
        img{
          width: 70px;
          height: 70px;
        }
      }
      p {
        text-align: right;
        color: #aaaaaa;
        margin-top: 15px;
        margin-right: 15px;
      }
      ul {
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        padding: 0 15px;
        li {
          height: 30px;
          padding: 0 10px;
          font-size: 16px;
          text-align: center;
          line-height: 30px;
          border-radius: 10px;
          margin-right: 10px;
          margin-top: 10px;
          border: 1px solid rgba(28, 146, 255, 1);
          background: rgba(28, 146, 255, 0.1);
          &.active {
            background: #1c92ff;
            border: 1px solid #1c92ff;
            color: #fff;
          }
          // &:nth-of-type(1) {
          //   border: 1px solid rgba(28, 146, 255, 1);
          //   background: rgba(28, 146, 255, 0.1);
          //   &.active {
          //     color: #1c92ff;
          //   }
          // }
          // &:nth-of-type(2) {
          //   background: rgba(255, 151, 28, 0.1);
          //   border: 1px solid rgba(255, 151, 28, 1);
          //   &.active {
          //     color: #ff971c;
          //   }
          // }
          // &:nth-of-type(3) {
          //   background: rgba(28, 252, 255, 0.1);
          //   border: 1px solid rgba(50, 209, 211, 1);
          //   &.active {
          //     color: #32d1d3;
          //   }
          // }
          // &:nth-of-type(4) {
          //   background: rgba(229, 206, 13, 0.1);
          //   border: 1px solid rgba(225, 193, 34, 1);
          //   &.active {
          //     color: #dfbd00;
          //   }
          // }
          // &:nth-of-type(5) {
          //   background: rgba(28, 255, 172, 0.1);
          //   border: 1px solid rgba(25, 226, 152, 1);
          //   &.active {
          //     color: #19e298;
          //   }
          // }
        }
      }
      button {
        width: 100%;
        height: 49px;
        border: none;
        border-top: 1px solid #eeeeee;
        background: #fff;
        margin-top: 25px;
        color: #1c92ff;
        font-size: 16px;
      }
    }
  }

  > img {
    width: 70px;
    height: 70px;
    position: fixed;
    top: 50%;
    margin-top: -140px;
    left: 5%;
    z-index: 9999;
  }

  button.save {
    width: 100%;
    height: 50px;
    display: block;
    border: none;
    background: #1c92ff;
    color: #fff;
    position: fixed;
    bottom: 0;
    left: 0;
  }
  .addr-dialog-desc {
    color: #666;
    padding: 10px 16px;
    font-size: 14px;
    text-align: center
  }
  .addr-dialog-input {
    margin-bottom: 20px
  }
}
</style>
